name: Deploy Shop Backend to Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Build with Maven
        run: mvn clean package -DskipTests
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: shop-backend-jar
          path: target/*.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: shop-backend-jar
          
      - name: Prepare server directories
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            # Stop the service if it's running
            sudo systemctl stop shop-backend || true
            
            # Ensure target directories exist and have proper permissions
            sudo mkdir -p /var/www/shop-backend/{deploy,data/productImages}
            sudo mkdir -p /var/log/shop-backend
            
            # Set ownership and permissions
            sudo chown -R deploy:deploy /var/www/shop-backend
            sudo chown -R deploy:deploy /var/log/shop-backend
            sudo chmod -R 755 /var/www/shop-backend
            sudo chmod 755 /var/log/shop-backend
            
            # Remove old jar files
            rm -f /var/www/shop-backend/*.jar
            
      - name: Copy JAR file directly to destination
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          source: "*.jar"
          target: "/var/www/shop-backend/"
          overwrite: true
          
      - name: Copy deployment scripts directly to destination
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          source: "deploy/"
          target: "/var/www/shop-backend/"
          overwrite: true
          
      - name: Set proper permissions and prepare for startup
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            # Ensure correct permissions after file transfer
            sudo chown -R deploy:deploy /var/www/shop-backend
            sudo chmod -R 755 /var/www/shop-backend
            
            # Make deployment script executable
            chmod +x /var/www/shop-backend/deploy/start.sh
            
            # Verify JAR file exists and is not corrupted
            if [ -f /var/www/shop-backend/*.jar ]; then
              echo "JAR file found:"
              ls -la /var/www/shop-backend/*.jar
              echo "JAR file size:"
              du -h /var/www/shop-backend/*.jar
            else
              echo "ERROR: JAR file not found!"
              exit 1
            fi
          
      - name: Start application
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          port: 22
          script: |
            # Copy systemd service file
            sudo cp /var/www/shop-backend/deploy/shop-backend.service /etc/systemd/system/
            
            # Reload systemd and enable service
            sudo systemctl daemon-reload
            sudo systemctl enable shop-backend
            
            # Start the service
            sudo systemctl start shop-backend
            
            # Check service status
            sudo systemctl status shop-backend
            
            # Wait for application to start
            sleep 30
            
            # Check if application is responding
            curl -f http://localhost:8080/actuator/health || echo "Health check failed"
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          MAIL_HOST: ${{ secrets.MAIL_HOST }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }} 